/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from "@aws-amplify/data-schema";
import { configure } from "@aws-amplify/data-schema/internals";
import { secret } from "@aws-amplify/backend";

export const schema = configure({
    database: {
        identifier: "IDGAJw0CzGENLtkddpjju3A",
        engine: "postgresql",
        connectionUri: secret("SQL_CONNECTION_STRING"),
        vpcConfig: {
            vpcId: "vpc-0f80f3b462e77b5d7",
            securityGroupIds: [
                "sg-0d1da410bd5e86b6e"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: "subnet-08296b8f8fdb55205",
                    availabilityZone: "us-west-2b"
                },
                {
                    subnetId: "subnet-034e1721270bec3d8",
                    availabilityZone: "us-west-2a"
                }
            ]
        }
    }
}).schema({
    "account": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        accountdetailid: a.string().required(),
        parentaccountid: a.string(),
        active: a.boolean().required(),
        taxid: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "accountdetail": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        type: a.enum([
            "ASSET",
            "LIABILITY",
            "REVENUE"
        ]),
        code: a.integer().required(),
        name: a.string().required(),
        description: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "client": a.model({
        id: a.string().required(),
        name: a.string().required(),
        slug: a.string().required(),
        logo: a.json(),
        website: a.string(),
        accountingmonth: a.integer().required(),
        accountingmethod: a.enum([
            "ACCRUAL",
            "CASH",
            "OTHER"
        ]),
        currency: a.enum([
            "USD",
            "CAD"
        ]),
        prorated_billing: a.boolean().required(),
        prorated_billing_date: a.integer(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "clientagreement": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        accountcode: a.integer().required(),
        active: a.boolean(),
        type: a.enum([
            "TRIAL",
            "PRIMARY",
            "ADDON"
        ]),
        name: a.string().required(),
        description: a.string(),
        startupfee: a.float().required(),
        introprice: a.float().required(),
        introbillingcycles: a.integer().required(),
        unitprice: a.float().required(),
        cancellationfee: a.float().required(),
        quantity: a.integer().required(),
        resetoninterval: a.boolean().required(),
        billingfrequency: a.enum([
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "ANNUALLY"
        ]),
        billingintervals: a.integer().required(),
        agreementbillingcycles: a.integer().required(),
        agreementterms: a.string(),
        agreementliability: a.string(),
        agreementauthorization: a.string(),
        singleentity: a.boolean().required(),
        singlefacility: a.boolean().required(),
        numberofusers: a.integer().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "clientmaintenancefee": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        accountcode: a.integer().required(),
        clientagreementid: a.string().required(),
        name: a.string().required(),
        description: a.string(),
        introprice: a.float().required(),
        introbillingcycles: a.integer().required(),
        unitprice: a.float().required(),
        billingfrequency: a.enum([
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "ANNUALLY"
        ]),
        billingintervals: a.integer().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "customattribute": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        attributetype: a.enum([
            "STRING",
            "DATETIME",
            "BOOLEAN",
            "NUMERIC",
            "SELECT"
        ]),
        name: a.string().required(),
        description: a.string(),
        options: a.json(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "emergencycontact": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        userid: a.string().required(),
        fullname: a.string().required(),
        email: a.string(),
        phone: a.string().required(),
        relationship: a.string().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "entity": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        name: a.string().required(),
        active: a.boolean().required(),
        ein: a.string(),
        address1: a.string(),
        address2: a.string(),
        city: a.string(),
        state: a.string(),
        postalcode: a.string(),
        postalcountry: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "facility": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        active: a.boolean().required(),
        name: a.string().required(),
        hours: a.json(),
        phone: a.string(),
        address1: a.string(),
        address2: a.string(),
        city: a.string(),
        state: a.string(),
        postalcode: a.string(),
        postalcountry: a.string(),
        cashenabled: a.boolean().required(),
        checkenabled: a.boolean().required(),
        creditenabled: a.boolean().required(),
        accountenabled: a.boolean().required(),
        giftcardenabled: a.boolean().required(),
        creditcards: a.json(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "invoice": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        userid: a.string().required(),
        entityid: a.string().required(),
        facilityid: a.string(),
        status: a.enum([
            "ACTIVE",
            "PAID",
            "CANCELLED",
            "OVERDUE",
            "CLOSED"
        ]),
        autopay: a.boolean(),
        description: a.string(),
        discount: a.float().required(),
        amount: a.float().required(),
        currency: a.enum([
            "USD",
            "CAD"
        ]),
        invoicedate: a.string(),
        dueon: a.string(),
        fulltext: a.string(),
        shortdate: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "invoiceline": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        invoiceid: a.string().required(),
        accountid: a.string(),
        offeringid: a.string().required(),
        description: a.string().required(),
        unitprice: a.float().required(),
        quantity: a.float().required(),
        discount: a.float().required(),
        amount: a.float().required(),
        taxid: a.string(),
        fulltext: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "memberagreement": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        facilityid: a.string().required(),
        accountid: a.string().required(),
        userid: a.string().required(),
        clientagreementid: a.string().required(),
        paymentmethodid: a.string(),
        referralid: a.string(),
        type: a.enum([
            "TRIAL",
            "PRIMARY",
            "ADDON"
        ]),
        name: a.string().required(),
        description: a.string(),
        status: a.enum([
            "GUEST",
            "ACTIVE",
            "PAUSED",
            "CANCELLED",
            "EXPIRED"
        ]),
        startupfee: a.float().required(),
        introprice: a.float().required(),
        introbillingcycles: a.integer().required(),
        unitprice: a.float().required(),
        discount: a.float().required(),
        nextbillingamount: a.float().required(),
        cancellationfee: a.float().required(),
        quantity: a.integer().required(),
        balance: a.integer().required(),
        resetoninterval: a.boolean().required(),
        startdate: a.string(),
        billingdate: a.string(),
        prorated: a.boolean().required(),
        autopay: a.boolean().required(),
        nextbillingdate: a.string().required(),
        billingfrequency: a.enum([
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "ANNUALLY"
        ]),
        billingintervals: a.integer().required(),
        agreementbillingcycles: a.integer().required(),
        totalbillingcycles: a.integer().required(),
        autorenew: a.boolean().required(),
        totalrenewalcycles: a.integer().required(),
        agreedterms: a.string(),
        agreedliability: a.string(),
        agreedauthorization: a.string(),
        signature: a.string(),
        restrictedfacilityid: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "memberagreementdependent": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        memberagreementid: a.string().required(),
        userdependentid: a.string().required(),
        agreedterms: a.string(),
        agreedliability: a.string(),
        agreedauthorization: a.string(),
        signature: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "memberagreementpause": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        memberagreementid: a.string().required(),
        startdate: a.string(),
        totalbillingcycles: a.integer().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "membermaintenancefee": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        accountid: a.string().required(),
        memberagreementid: a.string().required(),
        clientmaintenancefeeid: a.string().required(),
        name: a.string().required(),
        description: a.string(),
        introprice: a.float().required(),
        introbillingcycles: a.integer().required(),
        unitprice: a.float().required(),
        nextbillingamount: a.float().required(),
        billingdate: a.string(),
        prorated: a.boolean().required(),
        nextbillingdate: a.string().required(),
        billingfrequency: a.enum([
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "ANNUALLY"
        ]),
        billingintervals: a.integer().required(),
        totalbillingcycles: a.integer().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "merchant": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        site: a.string().required(),
        merchantid: a.string().required(),
        authtoken: a.string().required(),
        enabled: a.boolean().required(),
        cardprocessor: a.string(),
        accountupdater: a.boolean().required(),
        avs: a.boolean().required(),
        cvv: a.boolean().required(),
        echeck: a.boolean().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "offering": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        facilityid: a.string().required(),
        offeringdetailid: a.string().required(),
        accountid: a.string(),
        active: a.boolean(),
        unitcost: a.float(),
        unitprice: a.float().required(),
        taxable: a.boolean(),
        fulltext: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "offeringcategory": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        name: a.string().required(),
        description: a.string(),
        color: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "offeringdetail": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        offeringcategoryid: a.string(),
        code: a.string().required(),
        name: a.string().required(),
        description: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "offeringpointofsale": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        offeringid: a.string().required(),
        pointofsaleid: a.string().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "payment": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string(),
        facilityid: a.string(),
        userid: a.string().required(),
        paymentmethodid: a.string(),
        status: a.enum([
            "PENDING",
            "AUTHORIZED",
            "ACCEPTED",
            "DECLINED",
            "VOIDED",
            "QUEUED",
            "REFUNDED"
        ]),
        processedby: a.string(),
        pointofsaleid: a.string(),
        autopay: a.boolean(),
        amount: a.float().required(),
        currency: a.enum([
            "USD",
            "CAD"
        ]),
        paymenttype: a.enum([
            "CASH",
            "CHECK",
            "CREDIT",
            "ACCOUNT",
            "GIFT",
            "CHARGE"
        ]),
        token: a.string(),
        expiration: a.date(),
        name: a.string(),
        description: a.string(),
        postal: a.string(),
        phone: a.string(),
        retref: a.string(),
        response: a.string(),
        avsvalid: a.boolean(),
        cvvvalid: a.boolean(),
        authcode: a.string(),
        shortdate: a.string(),
        fulltext: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "paymentmethod": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        userid: a.string().required(),
        profileid: a.string().required(),
        accountid: a.string().required(),
        cofpermission: a.boolean().required(),
        accounttype: a.enum([
            "CHECK",
            "CARD"
        ]),
        token: a.string().required(),
        expiration: a.date(),
        updateoptout: a.boolean().required(),
        name: a.string(),
        postal: a.string(),
        phone: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "pointofsale": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        facilityid: a.string().required(),
        active: a.boolean().required(),
        name: a.string().required(),
        cashenabled: a.boolean().required(),
        checkenabled: a.boolean().required(),
        creditenabled: a.boolean().required(),
        accountenabled: a.boolean().required(),
        giftcardenabled: a.boolean().required(),
        creditcards: a.json(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "tax": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        entityid: a.string().required(),
        parenttaxid: a.string(),
        active: a.boolean().required(),
        name: a.string().required(),
        agency: a.string().required(),
        rate: a.float(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "transactionlink": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        invoiceid: a.string(),
        paymentid: a.string(),
        accountid: a.string(),
        amount: a.float().required(),
        closed: a.boolean(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "user": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        primaryentityid: a.string(),
        primaryfacilityid: a.string(),
        responsiblepartyid: a.string(),
        status: a.enum([
            "GUEST",
            "ACTIVE",
            "ON_HOLD",
            "EXPIRED",
            "CANCELLED",
            "STAFF",
            "UNASSIGNED",
            "ARCHIVED"
        ]),
        persona: a.enum([
            "PERCH_ADMIN",
            "STAFF",
            "MEMBER_STAFF",
            "MEMBER",
            "NON_MEMBER",
            "ARCHIVED"
        ]),
        email: a.string().required(),
        avatar: a.json(),
        title: a.string(),
        firstname: a.string().required(),
        middlename: a.string(),
        lastname: a.string().required(),
        gender: a.enum([
            "MALE",
            "FEMALE",
            "OTHER"
        ]),
        birthdate: a.datetime(),
        accesscode: a.string(),
        fulltext: a.string(),
        custom_attributes: a.json(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "useraddress": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        userid: a.string().required(),
        type: a.string(),
        address1: a.string(),
        address2: a.string(),
        city: a.string(),
        state: a.string(),
        postalcode: a.string(),
        postalcountry: a.string(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "usercheckinauditlog": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        facilityid: a.string().required(),
        memberagreementid: a.string().required(),
        userid: a.string().required(),
        status: a.enum([
            "GUEST",
            "ACTIVE",
            "PAUSED",
            "CANCELLED",
            "EXPIRED"
        ]),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "userdependent": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        userid: a.string().required(),
        avatar: a.json(),
        title: a.string(),
        firstname: a.string().required(),
        middlename: a.string(),
        lastname: a.string().required(),
        gender: a.enum([
            "MALE",
            "FEMALE",
            "OTHER"
        ]),
        birthdate: a.datetime(),
        email: a.string(),
        phone: a.string(),
        accesscode: a.string(),
        customattributes: a.json(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ]),
    "userphone": a.model({
        id: a.string().required(),
        clientid: a.string().required(),
        userid: a.string().required(),
        type: a.enum([
            "MOBILE",
            "HOME",
            "WORK"
        ]),
        number: a.string().required(),
        createdat: a.string(),
        createdby: a.string().required(),
        updatedat: a.string(),
        updatedby: a.string().required(),
        _deleted: a.boolean()
    }).identifier([
        "id"
    ])
});
